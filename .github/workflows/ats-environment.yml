name: ATS Environment Setup

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Connect and setup EC2 environment
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          set -euo pipefail
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} <<'EOF'
            set -e
            echo "🚀 Setting up ATS environment on EC2 (${HOST})..."

            # Update and install dependencies
            sudo apt update -y
            sudo apt install -y python3 python3-venv python3-pip postgresql postgresql-contrib nginx nodejs npm git curl

            # Enable and start PostgreSQL
            sudo systemctl enable postgresql
            sudo systemctl start postgresql

            # Create project directories
            sudo mkdir -p /var/www/ats /var/www/ats-backups
            sudo chown -R ${USER}:www-data /var/www/ats /var/www/ats-backups

            # Configure PostgreSQL user and database
            if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='ak_user';" | grep -q 1; then
              sudo -u postgres psql -c "CREATE USER ak_user WITH PASSWORD 'navat';"
              echo "✅ PostgreSQL user 'ak_user' created."
            else
              echo "ℹ️ PostgreSQL user 'ak_user' already exists."
            fi

            if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='ak_db';" | grep -q 1; then
              sudo -u postgres psql -c "CREATE DATABASE ak_db OWNER ak_user;"
              echo "✅ Database 'ak_db' created."
            else
              echo "ℹ️ Database 'ak_db' already exists."
            fi

            # Grant privileges
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ak_db TO ak_user;"

            # Write Nginx configuration dynamically
            echo "🧩 Writing Nginx configuration..."
            echo "🧩 Writing Nginx configuration..."
            sudo bash -c "cat <<'NGINX' > /etc/nginx/sites-available/ats.conf
            server {
                listen 80;
                server_name ${HOST};

                root /var/www/ats/frontend/dist;
                index index.html;

                location / {
                    try_files \$uri \$uri/ /index.html;
                }

                location /backend/ {
                    rewrite ^/backend/?(.*)\$ /\$1 break;
                    proxy_pass http://127.0.0.1:8000/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }
            }
            NGINX"



            sudo ln -sf /etc/nginx/sites-available/ats.conf /etc/nginx/sites-enabled/ats.conf
            sudo nginx -t
            echo "✅ Nginx configuration completed (not started yet)."
          EOF

          # Clean up private key
          shred -u private_key.pem || rm -f private_key.pem
