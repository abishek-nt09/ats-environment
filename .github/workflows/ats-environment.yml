name: ATS Environment Setup

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Connect and setup EC2 environment
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "🚀 Connecting to EC2 and setting up environment..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} 
            set -e

            echo "🔹 Updating system packages..."
            sudo apt update -y
            sudo apt install -y python3 python3-venv python3-pip postgresql postgresql-contrib nginx nodejs npm git curl

            echo "📁 Creating directories..."
            sudo mkdir -p /var/www/ats /var/www/ats-backups/backend /var/www/ats/frontend
            sudo chown -R ubuntu:www-data /var/www/ats /var/www/ats-backups

            echo "🧠 Configuring PostgreSQL..."
            sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='\''ak_user'\'';" | grep -q 1 \
              || (echo "Creating DB user ak_user..." && sudo -u postgres psql -c "CREATE USER ak_user WITH PASSWORD '\''navat'\'';")

            sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='\''ak_db'\'';" | grep -q 1 \
              || (echo "Creating DB ak_db..." && sudo -u postgres psql -c "CREATE DATABASE ak_db OWNER ak_user;")

            echo "🧱 Creating Nginx config..."
            sudo bash -c "cat > /etc/nginx/sites-available/ats.conf" <<CONFIG
            server {
                listen 80;
                server_name ${HOST};
            
                root /var/www/ats/frontend/dist;
                index index.html;
            
                location / {
                    try_files \$uri \$uri/ /index.html;
                }
            
                location /backend/ {
                    rewrite ^/backend/?(.*)$ /\$1 break;
                    proxy_pass http://127.0.0.1:8000/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }
            }
            CONFIG

            echo "🔗 Enabling Nginx config..."
            sudo ln -sf /etc/nginx/sites-available/ats.conf /etc/nginx/sites-enabled/ats.conf
            sudo nginx -t

            echo "⚙️ Creating FastAPI systemd service..."
            sudo tee /etc/systemd/system/fastapi.service > /dev/null <<SERVICE
              [Unit]
              Description=FastAPI Backend
              After=network.target
              
              [Service]
              User=ubuntu
              Group=www-data
              WorkingDirectory=/var/www/ats/backend
              EnvironmentFile=/var/www/ats/backend/.env
              ExecStart=/var/www/ats/backend/venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
              Restart=always
              StandardOutput=append:/var/log/fastapi.log
              StandardError=append:/var/log/fastapi.log
              
              [Install]
              WantedBy=multi-user.target
              SERVICE

            echo "🔁 Enabling FastAPI service..."
            sudo systemctl daemon-reload
            sudo systemctl enable fastapi

            echo "✅ Environment setup complete (Nginx configured and FastAPI service ready)."
          
